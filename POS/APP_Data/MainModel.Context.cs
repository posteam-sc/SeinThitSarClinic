//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace POS.APP_Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class POSEntities : DbContext
    {
        public POSEntities()
            : base("name=POSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Adjustment> Adjustments { get; set; }
        public DbSet<AdjustmentType> AdjustmentTypes { get; set; }
        public DbSet<AttachGiftForTransaction> AttachGiftForTransactions { get; set; }
        public DbSet<Authorize> Authorizes { get; set; }
        public DbSet<Brand> Brands { get; set; }
        public DbSet<City> Cities { get; set; }
        public DbSet<ConsignmentCounter> ConsignmentCounters { get; set; }
        public DbSet<ConsignmentSettlement> ConsignmentSettlements { get; set; }
        public DbSet<Counter> Counters { get; set; }
        public DbSet<Currency> Currencies { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<CustomerType> CustomerTypes { get; set; }
        public DbSet<DailyRecord> DailyRecords { get; set; }
        public DbSet<Damage> Damages { get; set; }
        public DbSet<DeleteLog> DeleteLogs { get; set; }
        public DbSet<ExchangeRateForTransaction> ExchangeRateForTransactions { get; set; }
        public DbSet<GiftCard> GiftCards { get; set; }
        public DbSet<GiftCardInCustomer> GiftCardInCustomers { get; set; }
        public DbSet<GiftSystem> GiftSystems { get; set; }
        public DbSet<Loc_CustomerPoint> Loc_CustomerPoint { get; set; }
        public DbSet<Loc_PointRedeemHistory> Loc_PointRedeemHistory { get; set; }
        public DbSet<MainPurchase> MainPurchases { get; set; }
        public DbSet<MemberCardRule> MemberCardRules { get; set; }
        public DbSet<MemberType> MemberTypes { get; set; }
        public DbSet<PaymentType> PaymentTypes { get; set; }
        public DbSet<Product> Products { get; set; }
        public DbSet<ProductCategory> ProductCategories { get; set; }
        public DbSet<ProductInfo> ProductInfoes { get; set; }
        public DbSet<ProductPriceChange> ProductPriceChanges { get; set; }
        public DbSet<ProductQuantityChange> ProductQuantityChanges { get; set; }
        public DbSet<ProductSubCategory> ProductSubCategories { get; set; }
        public DbSet<PurchaseDeleteLog> PurchaseDeleteLogs { get; set; }
        public DbSet<PurchaseDetail> PurchaseDetails { get; set; }
        public DbSet<PurchaseDetailInTransaction> PurchaseDetailInTransactions { get; set; }
        public DbSet<RoleManagement> RoleManagements { get; set; }
        public DbSet<Room> Rooms { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<SPDetail> SPDetails { get; set; }
        public DbSet<StockTransaction> StockTransactions { get; set; }
        public DbSet<Supplier> Suppliers { get; set; }
        public DbSet<Tax> Taxes { get; set; }
        public DbSet<Transaction> Transactions { get; set; }
        public DbSet<TransactionDetail> TransactionDetails { get; set; }
        public DbSet<Unit> Units { get; set; }
        public DbSet<UnitConversion> UnitConversions { get; set; }
        public DbSet<UsePrePaidDebt> UsePrePaidDebts { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<WrapperItem> WrapperItems { get; set; }
    
        public virtual ObjectResult<AverageMonthlySaleReport_Result> AverageMonthlySaleReport(Nullable<System.DateTime> year, Nullable<long> productId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReport_Result>("AverageMonthlySaleReport", yearParameter, productIdParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportBrandId_Result> AverageMonthlySaleReportBrandId(Nullable<System.DateTime> year, Nullable<int> brandId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportBrandId_Result>("AverageMonthlySaleReportBrandId", yearParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportByBrandIdAndCounterId_Result> AverageMonthlySaleReportByBrandIdAndCounterId(Nullable<System.DateTime> year, Nullable<int> brandId, Nullable<int> counterId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportByBrandIdAndCounterId_Result>("AverageMonthlySaleReportByBrandIdAndCounterId", yearParameter, brandIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportByDateTime_Result> AverageMonthlySaleReportByDateTime(Nullable<System.DateTime> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportByDateTime_Result>("AverageMonthlySaleReportByDateTime", yearParameter);
        }
    
        public virtual ObjectResult<AverageMonthlySaleReportCounterId_Result> AverageMonthlySaleReportCounterId(Nullable<System.DateTime> year, Nullable<int> counterId)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AverageMonthlySaleReportCounterId_Result>("AverageMonthlySaleReportCounterId", yearParameter, counterIdParameter);
        }
    
        public virtual int ClearDBConnections()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearDBConnections");
        }
    
        public virtual int ExportDatabase(string path, string backUpName)
        {
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var backUpNameParameter = backUpName != null ?
                new ObjectParameter("BackUpName", backUpName) :
                new ObjectParameter("BackUpName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportDatabase", pathParameter, backUpNameParameter);
        }
    
        public virtual ObjectResult<GetConsignmentProduct_Result> GetConsignmentProduct(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<int> cId)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            var cIdParameter = cId.HasValue ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsignmentProduct_Result>("GetConsignmentProduct", fromdateParameter, todateParameter, cIdParameter);
        }
    
        public virtual ObjectResult<GetCustomerSaleByCuId_Result> GetCustomerSaleByCuId(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSaleByCuId_Result>("GetCustomerSaleByCuId", idParameter);
        }
    
        public virtual ObjectResult<GetCustomerSaleById_Result> GetCustomerSaleById(Nullable<int> customerId, Nullable<int> productId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("todate", todate) :
                new ObjectParameter("todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerSaleById_Result>("GetCustomerSaleById", customerIdParameter, productIdParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<string> GetProductCode(string prefix, Nullable<int> rlength, Nullable<int> sLength)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            var rlengthParameter = rlength.HasValue ?
                new ObjectParameter("rlength", rlength) :
                new ObjectParameter("rlength", typeof(int));
    
            var sLengthParameter = sLength.HasValue ?
                new ObjectParameter("sLength", sLength) :
                new ObjectParameter("sLength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetProductCode", prefixParameter, rlengthParameter, sLengthParameter);
        }
    
        public virtual ObjectResult<GetProductReport_Result> GetProductReport(Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId, string skuCode)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var skuCodeParameter = skuCode != null ?
                new ObjectParameter("SkuCode", skuCode) :
                new ObjectParameter("SkuCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductReport_Result>("GetProductReport", mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter, skuCodeParameter);
        }
    
        public virtual ObjectResult<GetProfitandLoss_Result> GetProfitandLoss(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> brandId, Nullable<int> productId, Nullable<int> counterId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfitandLoss_Result>("GetProfitandLoss", fromDateParameter, toDateParameter, brandIdParameter, productIdParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetProfitAndLossByBrandId_Result> GetProfitAndLossByBrandId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> brandId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfitAndLossByBrandId_Result>("GetProfitAndLossByBrandId", fromDateParameter, toDateParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<GetProfitAndLossByCouterId_Result> GetProfitAndLossByCouterId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> counterID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var counterIDParameter = counterID.HasValue ?
                new ObjectParameter("counterID", counterID) :
                new ObjectParameter("counterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfitAndLossByCouterId_Result>("GetProfitAndLossByCouterId", fromDateParameter, toDateParameter, counterIDParameter);
        }
    
        public virtual ObjectResult<GetProfitAndLossByProductId_Result> GetProfitAndLossByProductId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<long> productID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProfitAndLossByProductId_Result>("GetProfitAndLossByProductId", fromDateParameter, toDateParameter, productIDParameter);
        }
    
        public virtual ObjectResult<GetSaleSpecialPromotionByCustomerId_Result> GetSaleSpecialPromotionByCustomerId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> bId, Nullable<bool> isSaleTruePrice)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var bIdParameter = bId.HasValue ?
                new ObjectParameter("bId", bId) :
                new ObjectParameter("bId", typeof(int));
    
            var isSaleTruePriceParameter = isSaleTruePrice.HasValue ?
                new ObjectParameter("IsSaleTruePrice", isSaleTruePrice) :
                new ObjectParameter("IsSaleTruePrice", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleSpecialPromotionByCustomerId_Result>("GetSaleSpecialPromotionByCustomerId", fromDateParameter, toDateParameter, bIdParameter, isSaleTruePriceParameter);
        }
    
        public virtual ObjectResult<GetSaleSpecialPromotionSegmentByCustomerId_Result> GetSaleSpecialPromotionSegmentByCustomerId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> bId, Nullable<bool> isSaleTruePrice)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var bIdParameter = bId.HasValue ?
                new ObjectParameter("bId", bId) :
                new ObjectParameter("bId", typeof(int));
    
            var isSaleTruePriceParameter = isSaleTruePrice.HasValue ?
                new ObjectParameter("IsSaleTruePrice", isSaleTruePrice) :
                new ObjectParameter("IsSaleTruePrice", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSaleSpecialPromotionSegmentByCustomerId_Result>("GetSaleSpecialPromotionSegmentByCustomerId", fromDateParameter, toDateParameter, bIdParameter, isSaleTruePriceParameter);
        }
    
        public virtual ObjectResult<GetTotalAmountForCash_Result> GetTotalAmountForCash(Nullable<System.DateTime> datetime, Nullable<int> paymentTypeID, Nullable<int> counterId)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("Datetime", datetime) :
                new ObjectParameter("Datetime", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalAmountForCash_Result>("GetTotalAmountForCash", datetimeParameter, paymentTypeIDParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetTotalAmountForPrepaid_Result> GetTotalAmountForPrepaid(Nullable<System.DateTime> datetime, Nullable<int> paymentTypeID, Nullable<int> counterId)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("Datetime", datetime) :
                new ObjectParameter("Datetime", typeof(System.DateTime));
    
            var paymentTypeIDParameter = paymentTypeID.HasValue ?
                new ObjectParameter("PaymentTypeID", paymentTypeID) :
                new ObjectParameter("PaymentTypeID", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalAmountForPrepaid_Result>("GetTotalAmountForPrepaid", datetimeParameter, paymentTypeIDParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetTotalAmountForRefund_Result> GetTotalAmountForRefund(Nullable<System.DateTime> datetime, Nullable<int> counterId)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("Datetime", datetime) :
                new ObjectParameter("Datetime", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalAmountForRefund_Result>("GetTotalAmountForRefund", datetimeParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<GetTotalTransactionQtyAndQty_Result> GetTotalTransactionQtyAndQty(Nullable<System.DateTime> datetime, Nullable<int> counterId)
        {
            var datetimeParameter = datetime.HasValue ?
                new ObjectParameter("Datetime", datetime) :
                new ObjectParameter("Datetime", typeof(System.DateTime));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalTransactionQtyAndQty_Result>("GetTotalTransactionQtyAndQty", datetimeParameter, counterIdParameter);
        }
    
        public virtual ObjectResult<string> InsertDraft(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> taxAmount, Nullable<int> discountAmount, Nullable<long> totalAmount, Nullable<long> recieveAmount, Nullable<int> giftCardId, Nullable<int> customerId, Nullable<int> customerTypdId, Nullable<int> roomId, Nullable<bool> isWholeSale)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(long));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(long));
    
            var giftCardIdParameter = giftCardId.HasValue ?
                new ObjectParameter("GiftCardId", giftCardId) :
                new ObjectParameter("GiftCardId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var customerTypdIdParameter = customerTypdId.HasValue ?
                new ObjectParameter("CustomerTypdId", customerTypdId) :
                new ObjectParameter("CustomerTypdId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            var isWholeSaleParameter = isWholeSale.HasValue ?
                new ObjectParameter("IsWholeSale", isWholeSale) :
                new ObjectParameter("IsWholeSale", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertDraft", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, taxAmountParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter, giftCardIdParameter, customerIdParameter, customerTypdIdParameter, roomIdParameter, isWholeSaleParameter);
        }
    
        public virtual ObjectResult<string> InsertRefundTransaction(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> taxAmount, Nullable<int> discountAmount, Nullable<long> totalAmount, Nullable<long> recieveAmount, string parentId, Nullable<int> giftCardId, Nullable<int> customerId)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(long));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(long));
    
            var parentIdParameter = parentId != null ?
                new ObjectParameter("ParentId", parentId) :
                new ObjectParameter("ParentId", typeof(string));
    
            var giftCardIdParameter = giftCardId.HasValue ?
                new ObjectParameter("GiftCardId", giftCardId) :
                new ObjectParameter("GiftCardId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertRefundTransaction", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, taxAmountParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter, parentIdParameter, giftCardIdParameter, customerIdParameter);
        }
    
        public virtual int insertSPDetail(Nullable<long> transactionDetailID, Nullable<long> parentProductID, Nullable<long> childProductID, Nullable<long> price, Nullable<decimal> discountRate, string shopCode)
        {
            var transactionDetailIDParameter = transactionDetailID.HasValue ?
                new ObjectParameter("TransactionDetailID", transactionDetailID) :
                new ObjectParameter("TransactionDetailID", typeof(long));
    
            var parentProductIDParameter = parentProductID.HasValue ?
                new ObjectParameter("ParentProductID", parentProductID) :
                new ObjectParameter("ParentProductID", typeof(long));
    
            var childProductIDParameter = childProductID.HasValue ?
                new ObjectParameter("ChildProductID", childProductID) :
                new ObjectParameter("ChildProductID", typeof(long));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(long));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(decimal));
    
            var shopCodeParameter = shopCode != null ?
                new ObjectParameter("ShopCode", shopCode) :
                new ObjectParameter("ShopCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertSPDetail", transactionDetailIDParameter, parentProductIDParameter, childProductIDParameter, priceParameter, discountRateParameter, shopCodeParameter);
        }
    
        public virtual ObjectResult<string> InsertTransaction(Nullable<System.DateTime> dateTime, Nullable<int> userId, Nullable<int> counterId, string type, Nullable<bool> isPaid, Nullable<bool> isActive, Nullable<int> paymentTypeId, Nullable<int> taxAmount, Nullable<int> discountAmount, Nullable<long> totalAmount, Nullable<long> recieveAmount, Nullable<int> giftCardId, Nullable<int> customerId, Nullable<decimal> mCDiscountAmt, Nullable<decimal> bDDiscountAmt, Nullable<int> memberTypeId, Nullable<decimal> mCDiscountPercent, Nullable<bool> isSettlement, string tranVouNos, Nullable<bool> isWholeSale, Nullable<int> customerTypeId, Nullable<int> roomId, Nullable<decimal> giftCardAmt)
        {
            var dateTimeParameter = dateTime.HasValue ?
                new ObjectParameter("DateTime", dateTime) :
                new ObjectParameter("DateTime", typeof(System.DateTime));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPaidParameter = isPaid.HasValue ?
                new ObjectParameter("IsPaid", isPaid) :
                new ObjectParameter("IsPaid", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var paymentTypeIdParameter = paymentTypeId.HasValue ?
                new ObjectParameter("PaymentTypeId", paymentTypeId) :
                new ObjectParameter("PaymentTypeId", typeof(int));
    
            var taxAmountParameter = taxAmount.HasValue ?
                new ObjectParameter("TaxAmount", taxAmount) :
                new ObjectParameter("TaxAmount", typeof(int));
    
            var discountAmountParameter = discountAmount.HasValue ?
                new ObjectParameter("DiscountAmount", discountAmount) :
                new ObjectParameter("DiscountAmount", typeof(int));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(long));
    
            var recieveAmountParameter = recieveAmount.HasValue ?
                new ObjectParameter("RecieveAmount", recieveAmount) :
                new ObjectParameter("RecieveAmount", typeof(long));
    
            var giftCardIdParameter = giftCardId.HasValue ?
                new ObjectParameter("GiftCardId", giftCardId) :
                new ObjectParameter("GiftCardId", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var mCDiscountAmtParameter = mCDiscountAmt.HasValue ?
                new ObjectParameter("MCDiscountAmt", mCDiscountAmt) :
                new ObjectParameter("MCDiscountAmt", typeof(decimal));
    
            var bDDiscountAmtParameter = bDDiscountAmt.HasValue ?
                new ObjectParameter("BDDiscountAmt", bDDiscountAmt) :
                new ObjectParameter("BDDiscountAmt", typeof(decimal));
    
            var memberTypeIdParameter = memberTypeId.HasValue ?
                new ObjectParameter("MemberTypeId", memberTypeId) :
                new ObjectParameter("MemberTypeId", typeof(int));
    
            var mCDiscountPercentParameter = mCDiscountPercent.HasValue ?
                new ObjectParameter("MCDiscountPercent", mCDiscountPercent) :
                new ObjectParameter("MCDiscountPercent", typeof(decimal));
    
            var isSettlementParameter = isSettlement.HasValue ?
                new ObjectParameter("IsSettlement", isSettlement) :
                new ObjectParameter("IsSettlement", typeof(bool));
    
            var tranVouNosParameter = tranVouNos != null ?
                new ObjectParameter("TranVouNos", tranVouNos) :
                new ObjectParameter("TranVouNos", typeof(string));
    
            var isWholeSaleParameter = isWholeSale.HasValue ?
                new ObjectParameter("IsWholeSale", isWholeSale) :
                new ObjectParameter("IsWholeSale", typeof(bool));
    
            var customerTypeIdParameter = customerTypeId.HasValue ?
                new ObjectParameter("CustomerTypeId", customerTypeId) :
                new ObjectParameter("CustomerTypeId", typeof(int));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(int));
    
            var giftCardAmtParameter = giftCardAmt.HasValue ?
                new ObjectParameter("GiftCardAmt", giftCardAmt) :
                new ObjectParameter("GiftCardAmt", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertTransaction", dateTimeParameter, userIdParameter, counterIdParameter, typeParameter, isPaidParameter, isActiveParameter, paymentTypeIdParameter, taxAmountParameter, discountAmountParameter, totalAmountParameter, recieveAmountParameter, giftCardIdParameter, customerIdParameter, mCDiscountAmtParameter, bDDiscountAmtParameter, memberTypeIdParameter, mCDiscountPercentParameter, isSettlementParameter, tranVouNosParameter, isWholeSaleParameter, customerTypeIdParameter, roomIdParameter, giftCardAmtParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertTransactionDetail(string transactionId, Nullable<int> productId, Nullable<int> qty, Nullable<int> unitPrice, Nullable<double> discountRate, Nullable<double> taxRate, Nullable<int> totalAmount, Nullable<bool> isDeleted, Nullable<long> consignmentPrice, Nullable<bool> isConsignmentPaid, Nullable<bool> isFOC, Nullable<int> sellingPrice)
        {
            var transactionIdParameter = transactionId != null ?
                new ObjectParameter("TransactionId", transactionId) :
                new ObjectParameter("TransactionId", typeof(string));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(int));
    
            var discountRateParameter = discountRate.HasValue ?
                new ObjectParameter("DiscountRate", discountRate) :
                new ObjectParameter("DiscountRate", typeof(double));
    
            var taxRateParameter = taxRate.HasValue ?
                new ObjectParameter("TaxRate", taxRate) :
                new ObjectParameter("TaxRate", typeof(double));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var consignmentPriceParameter = consignmentPrice.HasValue ?
                new ObjectParameter("ConsignmentPrice", consignmentPrice) :
                new ObjectParameter("ConsignmentPrice", typeof(long));
    
            var isConsignmentPaidParameter = isConsignmentPaid.HasValue ?
                new ObjectParameter("IsConsignmentPaid", isConsignmentPaid) :
                new ObjectParameter("IsConsignmentPaid", typeof(bool));
    
            var isFOCParameter = isFOC.HasValue ?
                new ObjectParameter("IsFOC", isFOC) :
                new ObjectParameter("IsFOC", typeof(bool));
    
            var sellingPriceParameter = sellingPrice.HasValue ?
                new ObjectParameter("SellingPrice", sellingPrice) :
                new ObjectParameter("SellingPrice", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertTransactionDetail", transactionIdParameter, productIdParameter, qtyParameter, unitPriceParameter, discountRateParameter, taxRateParameter, totalAmountParameter, isDeletedParameter, consignmentPriceParameter, isConsignmentPaidParameter, isFOCParameter, sellingPriceParameter);
        }
    
        public virtual int Paid(Nullable<bool> paid, string id)
        {
            var paidParameter = paid.HasValue ?
                new ObjectParameter("paid", paid) :
                new ObjectParameter("paid", typeof(bool));
    
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Paid", paidParameter, idParameter);
        }
    
        public virtual ObjectResult<string> ProductCdoe(string prefix)
        {
            var prefixParameter = prefix != null ?
                new ObjectParameter("prefix", prefix) :
                new ObjectParameter("prefix", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductCdoe", prefixParameter);
        }
    
        public virtual ObjectResult<ProductReportByBId_Result> ProductReportByBId(Nullable<int> brandId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByBId_Result>("ProductReportByBId", brandIdParameter);
        }
    
        public virtual ObjectResult<ProductReportByCId_Result> ProductReportByCId(Nullable<int> mainCategoryId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByCId_Result>("ProductReportByCId", mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportByCIdAndBId_Result> ProductReportByCIdAndBId(Nullable<int> brandId, Nullable<int> mainCategoryId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportByCIdAndBId_Result>("ProductReportByCIdAndBId", brandIdParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportBySCIdAndCId_Result> ProductReportBySCIdAndCId(Nullable<int> mainCategoryId, Nullable<int> subCategoryId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportBySCIdAndCId_Result>("ProductReportBySCIdAndCId", mainCategoryIdParameter, subCategoryIdParameter);
        }
    
        public virtual ObjectResult<ProductReportBySCIdAndCIdAndBId_Result> ProductReportBySCIdAndCIdAndBId(Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId)
        {
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReportBySCIdAndCIdAndBId_Result>("ProductReportBySCIdAndCIdAndBId", mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<PurchaseDiscountReport_Result> PurchaseDiscountReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> supplierId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("supplierId", supplierId) :
                new ObjectParameter("supplierId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseDiscountReport_Result>("PurchaseDiscountReport", fromDateParameter, toDateParameter, supplierIdParameter);
        }
    
        public virtual ObjectResult<PurchaseReport_Result> PurchaseReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> supplierId, Nullable<int> brandId, Nullable<int> productId, string searchType)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var supplierIdParameter = supplierId.HasValue ?
                new ObjectParameter("SupplierId", supplierId) :
                new ObjectParameter("SupplierId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var searchTypeParameter = searchType != null ?
                new ObjectParameter("SearchType", searchType) :
                new ObjectParameter("SearchType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PurchaseReport_Result>("PurchaseReport", fromDateParameter, toDateParameter, supplierIdParameter, brandIdParameter, productIdParameter, searchTypeParameter);
        }
    
        public virtual ObjectResult<RefundItemList_Result> RefundItemList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RefundItemList_Result>("RefundItemList", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownByRangeWithSaleTrueValue_Result> SaleBreakDownByRangeWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownByRangeWithSaleTrueValue_Result>("SaleBreakDownByRangeWithSaleTrueValue", fromDateParameter, toDateParameter, isSpParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownByRangeWithUnitValue_Result> SaleBreakDownByRangeWithUnitValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownByRangeWithUnitValue_Result>("SaleBreakDownByRangeWithUnitValue", fromDateParameter, toDateParameter, isSpParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownBySegmentWithSaleTrueValue_Result> SaleBreakDownBySegmentWithSaleTrueValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownBySegmentWithSaleTrueValue_Result>("SaleBreakDownBySegmentWithSaleTrueValue", fromDateParameter, toDateParameter, isSpParameter);
        }
    
        public virtual ObjectResult<SaleBreakDownBySegmentWithUnitValue_Result> SaleBreakDownBySegmentWithUnitValue(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSp)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSpParameter = isSp.HasValue ?
                new ObjectParameter("isSp", isSp) :
                new ObjectParameter("isSp", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleBreakDownBySegmentWithUnitValue_Result>("SaleBreakDownBySegmentWithUnitValue", fromDateParameter, toDateParameter, isSpParameter);
        }
    
        public virtual ObjectResult<SaleItemListByDate_Result> SaleItemListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SaleItemListByDate_Result>("SaleItemListByDate", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SelectItemListByDate_Result> SelectItemListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemListByDate_Result>("SelectItemListByDate", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SelectItemListByDateForItemSummary_Result> SelectItemListByDateForItemSummary(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> productId, Nullable<bool> isFOC)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var isFOCParameter = isFOC.HasValue ?
                new ObjectParameter("IsFOC", isFOC) :
                new ObjectParameter("IsFOC", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectItemListByDateForItemSummary_Result>("SelectItemListByDateForItemSummary", fromDateParameter, toDateParameter, isSaleParameter, productIdParameter, isFOCParameter);
        }
    
        public virtual ObjectResult<SelectTaxesListByDate_Result> SelectTaxesListByDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTaxesListByDate_Result>("SelectTaxesListByDate", fromDateParameter, toDateParameter, isSaleParameter);
        }
    
        public virtual ObjectResult<Top100SaleItemList_Result> Top100SaleItemList(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isAmount, Nullable<int> num)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isAmountParameter = isAmount.HasValue ?
                new ObjectParameter("IsAmount", isAmount) :
                new ObjectParameter("IsAmount", typeof(bool));
    
            var numParameter = num.HasValue ?
                new ObjectParameter("num", num) :
                new ObjectParameter("num", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Top100SaleItemList_Result>("Top100SaleItemList", fromDateParameter, toDateParameter, isAmountParameter, numParameter);
        }
    
        public virtual ObjectResult<TransactionDetailByItem_Result> TransactionDetailByItem(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> brandId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailByItem_Result>("TransactionDetailByItem", fromDateParameter, toDateParameter, isSaleParameter, mainCategoryIdParameter, subCategoryIdParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReport_Result> TransactionDetailReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId, Nullable<int> subCategoryId, Nullable<int> counterId, Nullable<bool> isFOC)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var counterIdParameter = counterId.HasValue ?
                new ObjectParameter("CounterId", counterId) :
                new ObjectParameter("CounterId", typeof(int));
    
            var isFOCParameter = isFOC.HasValue ?
                new ObjectParameter("IsFOC", isFOC) :
                new ObjectParameter("IsFOC", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReport_Result>("TransactionDetailReport", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter, subCategoryIdParameter, counterIdParameter, isFOCParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBId_Result> TransactionDetailReportByBId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBId_Result>("TransactionDetailReportByBId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBIdAndCId_Result> TransactionDetailReportByBIdAndCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBIdAndCId_Result>("TransactionDetailReportByBIdAndCId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByBIdAndCIdAndSCId_Result> TransactionDetailReportByBIdAndCIdAndSCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> brandId, Nullable<int> mainCategoryId, Nullable<int> subCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByBIdAndCIdAndSCId_Result>("TransactionDetailReportByBIdAndCIdAndSCId", fromDateParameter, toDateParameter, isSaleParameter, brandIdParameter, mainCategoryIdParameter, subCategoryIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportByCId_Result> TransactionDetailReportByCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> mainCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportByCId_Result>("TransactionDetailReportByCId", fromDateParameter, toDateParameter, isSaleParameter, mainCategoryIdParameter);
        }
    
        public virtual ObjectResult<TransactionDetailReportBySCIdAndCId_Result> TransactionDetailReportBySCIdAndCId(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> isSale, Nullable<int> subCategoryId, Nullable<int> mainCategoryId)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var isSaleParameter = isSale.HasValue ?
                new ObjectParameter("IsSale", isSale) :
                new ObjectParameter("IsSale", typeof(bool));
    
            var subCategoryIdParameter = subCategoryId.HasValue ?
                new ObjectParameter("SubCategoryId", subCategoryId) :
                new ObjectParameter("SubCategoryId", typeof(int));
    
            var mainCategoryIdParameter = mainCategoryId.HasValue ?
                new ObjectParameter("MainCategoryId", mainCategoryId) :
                new ObjectParameter("MainCategoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionDetailReportBySCIdAndCId_Result>("TransactionDetailReportBySCIdAndCId", fromDateParameter, toDateParameter, isSaleParameter, subCategoryIdParameter, mainCategoryIdParameter);
        }
    }
}
